

examples of AngularJS Directives

DOM Manipulation
ng-hide
ng-repeat
ng-show
ng-view

Modules/Controllers
ng-app
ng-controller

Data Binding
ng-bind
ng-init
ng-model

Events
ng-click
ng-keypress
ng-mouseenter

<div ng-hide="isHidden">

<div data-ng-hide="isHidden">

<ng-view></ng-view>

data binding

{{ 1 + 1 }}

this is called binding mark up
an expression is a property name
or object.property

or simple expressions  business logic should not go inside the view

ng-bind="name"

sorting and formatting

filters and pipes

| character

filter for currency or custom filters

other filters
currency
date
filter - applying a filter to a data
json - raw json for debugging
limitTo - array and limit to a certain number of items
lowercase - string to lowercase
number
orderBy
uppercase

example of filter
<ul>
	<li data-ng-repeate="cust in customers | orderBy:"'name'">
	  {{ cust.orderTotal | currency }}
	</li>
</ul>

<input type="text" data-ng-model="nameText" />
<ul>
	<li data-ng-repeat="cust in customers | filter:nameText | orderBy:'name'">
		{{ cust.name }} - {{ cust.city }} </li>
</ul>

module is a container

module a tupperwear container that can hold things
pull them out of the global scope

can hold routes and filters and directives

how do we define an actual module

havent assigned ng-app a value

ng-app="moduleName"

var demoApp = angular.module('demoApp', [])

angular.module()

[] array is for dependencies that the module might have

it may reference other modules

inject other modules into your module

var demoApp = angular.module('demoApp', ['helperModule']);

helperMOdule is an external module or third party module

ng-app is a directive to tell to parse to look for angular syntax

what are the ways we can add the controller
a global variable

#module
angular.module('customersApp', []);

#CustomersController.js
app.controller('CustomersController', function($scope){});

these are the notes

modules are containers
for
controllers
routes
filters
directives
factories
services


modules have a
angular.module method

name 'demoApp' and dependencies array '[]'
this is refered to as injecting dependencies

see this later with animation
third party libraries

creating a module in angular.js

defining a controller in a module

option 1

var demoApp = angular.module('appName', '[dependency_array]')

demoApp.controller('SimpleController', function(){})

demoApp.controller('SimpleController', function($scope){

})

option 2

var demoApp = angular.module('demoApp', []);

reference the module

angular.module('demoApp').controller('SimpleController', function($scope){
  $scope.customers = [
            ]
})

option 3
is avoiding the global scope
var demoApp = angular.module('demoApp', []);

//anonymous function wrapper so its not in the global scope
(function(){
  var SimpleController = function($scope){
    $scope.customers = []
  }

  angular.module('demoApp')
    .controller('SimpleController', SimpleController);

}());

anonymous function wrapper

final piece of this what if you run it a script minifier

$scope gets shortened to s
this will break everything

dependcy injection looks specifically for $scope

one option is

.controller('SimpleController',['$scope', function($scope) {
  $scope.customers = [];
}])



or var SimpleController = function($scope){
  $scope.customers = [];
};

SimpleController.$inject = ['$scope'];

angular.module('demoApp')
  .controller('SimpleController', SimpleController);

angular.module('customersApp', []);

